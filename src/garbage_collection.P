%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% $Rev: 855 $:     Revision of last commit
% $Author: fodor.paul $:  Author of last commit
% $Date: 2011-07-28 04:13:24 +0300 (Jo, 28 iul 2011) $:    Date of last commit
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
:- dynamic(garbage_control/1).

start_garbage_collection :-
	( prolog_backend(swi); prolog_backend(yap),use_module(library(system)) ),
	(garbage_control(general), garbage_window(N), N>0)
	-> general_garbage_collection
		; ( garbage_control(pattern)
			-> pattern_garbage_collection
			; true
	).

% explicit call garbage collection to retract all goals waiting for 
%  completion
call_gc:-
	findall(etr_db(T2,T1,B,A,C),
		(
			etr_db(T2,T1,B,A,C),
			retract(etr_db(T2,T1,B,A,C))),
		_L),
	(prolog_backend(yap),use_module(library(system)) -> garbage_collect; true),
	%garbage_collect,
	!.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% general garbage collection
% garbage_window(N)
:- dynamic(garbage_window/1).
% garbage_window_step(N)
:- dynamic(garbage_window_step/1).

general_garbage_collection :-
	garbage_window_step(S),
	alarm(S,general_garbage_collection_internal(S),_).
general_garbage_collection_internal(S):-
	% collect garbage
	%       computer the threshold datime as the current time + time 
	%       window
	%trace,
	current_datime(CurrentDatime),
	garbage_window(N),
	datime_minus_sec(CurrentDatime,N,Datime0),
	Datime0 = datime(T1_Y,T1_M,T1_D,T1_H,T1_Min,T1_S),
	datime(T1_Y,T1_M,T1_D,T1_H,T1_Min,T1_S,0) = Datime1,
	% find and delete all the facts in the database triggered before
	%       the threshold
	findall(etr_db(T2,T1,B,A,C),
		( etr_db(T2,T1,B,A,C),
			less_datime(T2,Datime1),
			retract(etr_db(T2,T1,B,A,C))),
		_L),
	% schedule the next garbage collection
	alarm(N,general_garbage_collection_internal(S),_).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% pattern based garbage collection
%       for garbage_control(pattern)
%       individual rules have gc time windows
pattern_garbage_collection :-
	findall(
		event_rule_property(Label,window,V,window_step,V2),
		(
			event_rule_property(Label,window,V),
			event_rule_property(Label,window_step,V2)
		),
		L),
	start_alarms_patern_gc(L),
	!.
pattern_garbage_collection.

start_alarms_patern_gc([]).
start_alarms_patern_gc([
		event_rule_property(Label,window,V,window_step,V2)|L]):-
	alarm(V2,
		pattern_garbage_collection_internal(
		  event_rule_property(Label,window,V,window_step,V2))
		,_),
	start_alarms_patern_gc(L).

pattern_garbage_collection_internal(
		  event_rule_property(Label,window,V,window_step,V2)):-
	% collect garbage
	%   computer the threshold datime as the current time + time window
	current_datime(CurrentDatime),
	datime_minus_sec(CurrentDatime,V,Datime0),
	Datime0 = datime(T1_Y,T1_M,T1_D,T1_H,T1_Min,T1_S),
	datime(T1_Y,T1_M,T1_D,T1_H,T1_Min,T1_S,0) = Datime1,
	% find and delete all the facts in the database triggered before
	%       the threshold
	findall(etr_db(T2,T1,B,A,C,Label),
		( etr_db(T2,T1,B,A,C,Label),
			%write(etr_db(T2,T1,B,A,C,Label)), nl,nl,
			less_datime(T2,Datime1),
			retract(etr_db(T2,T1,B,A,C,Label))),
		_L),
	% schedule the next garbage collection
	alarm(V2,
		pattern_garbage_collection_internal(
		  event_rule_property(Label,window,V,window_step,V2))
		,_).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
