swipl -g "open('../results.txt',append,FH), ['../../src/ep_sparql/ep_sparql.P'], set_etalis_flag(output_temporary_files,on), set_etalis_flag(logging_to_file,on), set_etalis_flag(store_fired_events,on), ep_sparql_parse('CONSTRUCT ?company hasStockPrice ?price2 WHERE { ?company hasStockPrice ?price1 } DO ( ?price2 is ?price1+1 && ?price2 < 1000 )',ParsedEPQuery),  assert(external_trigger(select_event/1)), dynamic(rdf_store/3), assert(rdf_store(company1,hasCEO,'Michael')), assert(external_trigger(rdf/3)), nl, write('ParsedEPQuery: '), write(ParsedEPQuery), nl, ep_sparql_compile(ParsedEPQuery,CEPRules,ResultComplexEvent), compile_internal_event_rules(main,CEPRules), nl, write('CEPRules: '), write(CEPRules), nl,  nl, event(rdf(company1,hasStockPrice,1)), findall(stored_event(event(rdf(company1,hasStockPrice,999),T)),stored_event(event(rdf(company1,hasStockPrice,999),T)),List), (List=[stored_event(event(rdf(company1,hasStockPrice,999),[datime(_,_,_,_,_,_,_),datime(_,_,_,_,_,_,_)]))] -> write(FH,'ep_sparql_07\t\t\tpassed\n'),write('ep_sparql_07\t\t\tpassed\n') ; write(FH,'ep_sparql_07\t\tfailed\n'),write('ep_sparql_07\t\tfailed\n') ),halt."

